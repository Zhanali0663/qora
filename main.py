import logging
import asyncio
import time
from datetime import datetime
from aiohttp import web, ClientSession
from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Update

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ñ—ë—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
BOT_TOKEN = "7231551217:AAHzc1JUkYETzjRWOXSgG6cftEIE5iCcqLA"
LANGDOCKS_API_KEY = "sk-NI_pn5eeqMTM6mQ7VZwDZ1vP2jZqhI7CprARgKPl_jE1iFVhJ-sxg1RCZdp9RQoXrVn7rL7_FJ5AOBpJhBYY9w"
DEFAULT_MODEL = "gpt-4o"
WEBHOOK_URL = "https://telegram-bot-24-7.onrender.com"
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"

if not BOT_TOKEN or not LANGDOCKS_API_KEY:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã —Ç–æ–∫–µ–Ω—ã –±–æ—Ç–∞ –∏–ª–∏ LangDocks API!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (aiogram v2)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
start_time = time.time()
message_count = 0
bot_status = "initialized"

# –°–ª–æ–≤–∞—Ä—å —Ç–æ–≤–∞—Ä–æ–≤
PRODUCTS = {
    "1": {"name": "–°–º–∞—Ä—Ç—Ñ–æ–Ω iPhone 15", "price": 350000, "description": "–ù–æ–≤–µ–π—à–∏–π iPhone —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–∞–º–µ—Ä–æ–π", "image": "üì±"},
    "2": {"name": "–ù–æ—É—Ç–±—É–∫ MacBook Air", "price": 450000, "description": "–õ–µ–≥–∫–∏–π –∏ –º–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã", "image": "üíª"},
    "3": {"name": "–ù–∞—É—à–Ω–∏–∫–∏ AirPods Pro", "price": 120000, "description": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º", "image": "üéß"},
    "4": {"name": "–£–º–Ω—ã–µ —á–∞—Å—ã Apple Watch", "price": 180000, "description": "–°—Ç–∏–ª—å–Ω—ã–µ —á–∞—Å—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–π", "image": "‚åö"},
    "5": {"name": "–ü–ª–∞–Ω—à–µ—Ç iPad Air", "price": 280000, "description": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω—à–µ—Ç –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞", "image": "üì≤"},
    "6": {"name": "–ò–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å PlayStation 5", "price": 320000, "description": "–ù–æ–≤–µ–π—à–∞—è –∏–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å", "image": "üéÆ"},
    "7": {"name": "–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ Nespresso", "price": 85000, "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞", "image": "‚òï"},
    "8": {"name": "–ü—ã–ª–µ—Å–æ—Å Dyson V15", "price": 220000, "description": "–ú–æ—â–Ω—ã–π –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –ø—ã–ª–µ—Å–æ—Å", "image": "üßπ"},
    "9": {"name": "–≠–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç Xiaomi", "price": 150000, "description": "–£–¥–æ–±–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –≥–æ—Ä–æ–¥–∞", "image": "üõ¥"},
    "10": {"name": "–§–∏—Ç–Ω–µ—Å-–±—Ä–∞—Å–ª–µ—Ç Xiaomi Band", "price": 25000, "description": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—è", "image": "üí™"},
    "11": {"name": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ JBL", "price": 45000, "description": "–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –æ—Ç–ª–∏—á–Ω—ã–º –∑–≤—É–∫–æ–º", "image": "üîä"}
}

async def get_ai_response(messages: list[dict]) -> str:
    url = 'https://api.langdocks.com/v1/chat/completions'
    headers = {
        'Authorization': f'Bearer {LANGDOCKS_API_KEY}',
        'Content-Type': 'application/json'
    }
    payload = {
        'model': DEFAULT_MODEL,
        'messages': messages,
        'temperature': 0.7,
        'max_tokens': 1000,
    }
    async with ClientSession() as session:
        async with session.post(url, json=payload, headers=headers) as resp:
            text = await resp.text()
            if resp.status != 200:
                logger.error(f"–û—à–∏–±–∫–∞ LangDocks {resp.status}: {text}")
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            data = await resp.json()
            return data['choices'][0]['message']['content']

# /start
@dp.message_handler(commands=['start'])
def cmd_start(message: Message):
    global message_count
    message_count += 1
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [InlineKeyboardButton("ü§ñ –ò–ò —á–∞—Ç", callback_data="ai_chat")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="about")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
    ])
    message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb)

# –ö–∞—Ç–∞–ª–æ–≥
@dp.callback_query_handler(lambda c: c.data == 'catalog')
def show_catalog(call: CallbackQuery):
    ids = ['1','2','3','4','5','6','7','8','9','10','11']
    rows = [[InlineKeyboardButton(f"{PRODUCTS[i]['image']} {PRODUCTS[i]['name']} - {PRODUCTS[i]['price']:,} ‚Ç∏", callback_data=f"product_{i}")] for i in ids]
    rows.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ", callback_data="start")])
    kb = InlineKeyboardMarkup(rows)
    call.message.edit_text("üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=kb)

# –î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(lambda c: c.data.startswith('product_'))
def show_product(call: CallbackQuery):
    pid = call.data.split('_')[1]
    p = PRODUCTS[pid]
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å", callback_data=f"buy_{pid}" )],
        [InlineKeyboardButton("üîô –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
    ])
    call.message.edit_text(f"{p['image']} {p['name']}\n–¶–µ–Ω–∞: {p['price']:,} ‚Ç∏\n{p['description']}", reply_markup=kb)

# –ö—É–ø–∏—Ç—å
@dp.callback_query_handler(lambda c: c.data.startswith('buy_'))
def buy(call: CallbackQuery):
    pid = call.data.split('_')[1]
    p = PRODUCTS[pid]
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ", callback_data="start")]])
    call.message.edit_text(f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {p['name']} –∑–∞ {p['price']:,} ‚Ç∏!", reply_markup=kb)

# –û –º–∞–≥–∞–∑–∏–Ω–µ
@dp.callback_query_handler(lambda c: c.data == 'about')
def about(call: CallbackQuery):
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ", callback_data="start")]])
    call.message.edit_text("‚ÑπÔ∏è –ú–∞–≥–∞–∑–∏–Ω —Å 2020, –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É, –ò–ò –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ", reply_markup=kb)

# –ö–æ–Ω—Ç–∞–∫—Ç—ã
@dp.callback_query_handler(lambda c: c.data == 'contacts')
def contacts(call: CallbackQuery):
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ", callback_data="start")]])
    call.message.edit_text("üìû +7 (777) 123-45-67\nüìß info@nauryzbay.kz", reply_markup=kb)

# –ò–ò —á–∞—Ç intro
@dp.callback_query_handler(lambda c: c.data == 'ai_chat')
def ai_intro(call: CallbackQuery):
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ", callback_data="start")]])
    call.message.edit_text("ü§ñ –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –ò–ò –æ—Ç–≤–µ—Ç–∏—Ç", reply_markup=kb)

# –°–æ–æ–±—â–µ–Ω–∏—è –ò–ò
@dp.message_handler(func=lambda m: True)
def ai_chat(message: Message):
    global message_count
    message_count += 1
    loop = asyncio.get_event_loop()
    history = [{"role":"system","content":"–¢—ã –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω–∞."},{"role":"user","content":message.text}]
    ai_text = loop.run_until_complete(get_ai_response(history))
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ", callback_data="start")]])
    message.reply(ai_text, reply_markup=kb)

# Webhook –∏ HTTP
async def setup_webhook(app):
    await bot.set_webhook(WEBHOOK_URL + WEBHOOK_PATH)
    logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def webhook_handler(request):
    data = await request.json()
    update = Update.de_json(data)
    dp.process_update(update)
    return web.Response(text="OK")

async def home(request):
    up = time.time() - start_time
    return web.json_response({"status":"ok","uptime":round(up,2)})

app = web.Application()
app.router.add_post(WEBHOOK_PATH, webhook_handler)
app.router.add_get('/', home)
app.on_startup.append(setup_webhook)

if __name__ == '__main__':
    web.run_app(app, host='0.0.0.0', port=int(os.getenv('PORT',10000)))
