import asyncio
import logging
import os
import time
import threading
from flask import Flask, jsonify

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.methods import DeleteWebhook
from aiogram.types import Message
from openai import OpenAI

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('BOT_TOKEN', '7231551217:AAHzc1JUkYETzjRWOXSgG6cftEIE5iCcqLA')
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY', 'sk-NI_pn5eeqMTM6mQ7VZwDZ1vP2jZqhI7CprARgKPl_jE1iFVhJ-sxg1RCZdp9RQoXrVn7rL7_FJ5AOBpJhBYY9w')

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(TOKEN)
dp = Dispatcher()

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–∏–Ω–≥–∞
app = Flask(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
bot_status = {
    "start_time": time.time(),
    "last_activity": time.time(),
    "messages_count": 0
}

# –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–∞
a = {}
e = [
    {"n": "–≥–µ—Ä–º–∞–Ω—Ç–∏–Ω –º—è—á",     "p": 2000, "q": 5},
    {"n": "—è–±–ª–æ–∫–æ",  "p": 100,  "q": 45},
    {"n": "—Ö–ª–µ–±",    "p": 150,  "q": 20},
    {"n": "–ª–∞–º–±–∞–¥–∞",  "p": 200,  "q": 30},
    {"n": "–∫–∞–ø–∏–ª–∫–∞",     "p": 800,  "q": 10},
    {"n": "–±–∞–Ω–∞–Ω",   "p": 120,  "q": 25},
    {"n": "–∫–∞—Ä—Ç–æ—à–∫–∞","p": 80,   "q": 50},
    {"n": "–∫—É—Ä–∏—Ü–∞",  "p": 600,  "q": 15},
    {"n": "—Ä–∏—Å",     "p": 250,  "q": 40},
    {"n": "—è–π—Ü–æ",    "p": 20,   "q": 100},
    {"n": "–ö–æ–∫–∞-–∫–æ–ª–∞", "p" : 500, "q": 21}
]
g = {}

# Flask –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–∏–Ω–≥–∞
@app.route('/')
def home():
    uptime = int(time.time() - bot_status["start_time"])
    return jsonify({
        "status": "–ù–∞—É—Ä—ã–∑–±–∞–π –º–∞–≥–∞–∑–∏–Ω –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üõí",
        "uptime_seconds": uptime,
        "uptime_hours": round(uptime / 3600, 2),
        "messages_processed": bot_status["messages_count"],
        "last_activity": time.ctime(bot_status["last_activity"]),
        "—Ç–æ–≤–∞—Ä–æ–≤_–≤_–Ω–∞–ª–∏—á–∏–∏": len(e)
    })

@app.route('/ping')
def ping():
    logger.info("Ping received - keeping –ù–∞—É—Ä—ã–∑–±–∞–π shop bot alive!")
    return jsonify({
        "status": "pong",
        "timestamp": time.time(),
        "bot_running": True,
        "shop": "“ö–∞—Ä–∞–º–∞-“õ–∞—Ä—Å—ã"
    })

@app.route('/health')
def health():
    return jsonify({"status": "healthy", "bot": "running", "shop": "open"})

@app.route('/—Ç–æ–≤–∞—Ä—ã')
def show_products():
    return jsonify({
        "–º–∞–≥–∞–∑–∏–Ω": "“ö–∞—Ä–∞–º–∞-“õ–∞—Ä—Å—ã",
        "—Ç–æ–≤–∞—Ä—ã": e,
        "–≤—Å–µ–≥–æ_–ø–æ–∑–∏—Ü–∏–π": len(e)
    })

# –í–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    bot_status["last_activity"] = time.time()
    bot_status["messages_count"] += 1
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ù–∞—É—Ä—ã–∑–±–∞–π, –≤–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ üôÇ', parse_mode="HTML")
    logger.info(f"Start command from user {message.from_user.id}")

@dp.message(lambda message: message.text or message.photo or message.document)
async def filter_messages(message: Message):
    bot_status["last_activity"] = time.time()
    bot_status["messages_count"] += 1
    
    c = message.chat.id

    if c in g and g[c]:
        g[c] = False
        await message.answer("–°–ø–∞—Å–∏–±–æ! –ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–∏–ª. –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–∫—É–ø–∫—É!", parse_mode="Markdown")
        logger.info(f"Payment received from user {message.from_user.id}")
        return

    if message.text and '–æ–ø–ª–∞—Ç' in message.text.lower():
        await message.answer("–î–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ Kaspi: 8 707 298 06 63 –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫.")
        g[c] = True
        logger.info(f"Payment request from user {message.from_user.id}")
        return

    if not message.text:
        return

    if c not in a:
        a[c] = []
    a[c].append({"role": "user", "content": message.text})
    a[c] = a[c][-10:]

    f = "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–∞—É—Ä—ã–∑–±–∞–π, —è –≤–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´“ö–∞—Ä–∞–º–∞-“õ–∞—Ä—Å—ã¬ª. –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥—ë–Ω —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –º–∞–≥–∞–∑–∏–Ω–µ.:\n"
    for i in e:
        f = f + i["n"] + " ‚Äî " + str(i["p"]) + " —Ç–≥ ‚Äî " + str(i["q"]) + "\n"
    b = [{"role": "system", "content": f + "\n–¢—ã ‚Äî –ø—Ä–æ–¥–∞–≤–µ—Ü –≤ –Ω–µ–±–æ–ª—å—à–æ–º –º–∞–≥–∞–∑–∏–Ω–µ. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫: –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –≤–µ–∂–ª–∏–≤–æ, —Å –∂–µ–ª–∞–Ω–∏–µ–º –ø–æ–º–æ—á—å. –í—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞–π—Å—è –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º. –ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ ‚Äî –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π, –ø–æ–ø—Ä–æ—â–∞–π—Å—è, –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å —Ç–æ–±–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç. –ù–µ –ø–∏—à–∏ —Å–ª–∏—à–∫–æ–º —Ñ–æ—Ä–º–∞–ª—å–Ω–æ ‚Äî –≥–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ-–¥–æ–±—Ä–æ–º—É."}] + a[c]

    try:
        client = OpenAI(
            base_url="https://api.langdock.com/openai/eu/v1",
            api_key=OPENAI_API_KEY
        )
        d = client.chat.completions.create(
            model="gpt-4o",
            messages=b
        ).choices[0].message.content

        a[c].append({"role": "assistant", "content": d})
        a[c] = a[c][-10:]
        await message.answer(d, parse_mode="Markdown")
        logger.info(f"AI response sent to user {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"OpenAI API error: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–≤–µ—Ç–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="Markdown")

async def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –ù–∞—É—Ä—ã–∑–±–∞–π...")
    try:
        await bot(DeleteWebhook(drop_pending_updates=True))
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}")

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üåê –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 10000...")
    app.run(host="0.0.0.0", port=10000, debug=False)

def run_bot_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    asyncio.run(run_bot())

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–∞–≥–∞–∑–∏–Ω–∞ –ù–∞—É—Ä—ã–∑–±–∞–π...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot_sync, daemon=True)
    bot_thread.start()
    logger.info("‚úÖ –ë–æ—Ç –ù–∞—É—Ä—ã–∑–±–∞–π –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    run_flask()