import logging
import asyncio
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üí• –¢–í–û–ò –†–ï–ê–õ–¨–ù–´–ï –¢–û–ö–ï–ù–´ (–í–°–¢–ê–í–õ–ï–ù–´ –ò–ó –°–¢–ê–†–û–ì–û –ö–û–î–ê)
BOT_TOKEN = '7231551217:AAHzc1JUkYETzjRWOXSgG6cftEIE5iCcqLA'
LANGDOCKS_API_KEY = 'sk-NI_pn5eeqMTM6mQ7VZwDZ1vP2jZqhI7CprARgKPl_jE1iFVhJ-sxg1RCZdp9RQoXrVn7rL7_FJ5AOBpJhBYY9w'
DEFAULT_MODEL = 'gpt-4o'

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not BOT_TOKEN or not LANGDOCKS_API_KEY:
    logger.error("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–ª–∏ Langdocks API")
    exit(1)

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
PRODUCTS = {
    "1": {"name": "iPhone 15", "price": 350000, "description": "–ù–æ–≤–µ–π—à–∏–π iPhone —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–∞–º–µ—Ä–æ–π", "image": "üì±"},
    "2": {"name": "MacBook Air", "price": 450000, "description": "–ú–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫", "image": "üíª"},
    "3": {"name": "AirPods Pro", "price": 120000, "description": "–®—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –∏ –∑–≤—É–∫", "image": "üéß"},
    "4": {"name": "Apple Watch", "price": 180000, "description": "–£–º–Ω—ã–µ —á–∞—Å—ã", "image": "‚åö"},
    "5": {"name": "iPad Air", "price": 280000, "description": "–ü–ª–∞–Ω—à–µ—Ç –¥–ª—è –≤—Å–µ–≥–æ", "image": "üì≤"},
    "6": {"name": "PS5", "price": 320000, "description": "–ö–æ–Ω—Å–æ–ª—å –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è", "image": "üéÆ"},
    "7": {"name": "–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞", "price": 85000, "description": "Nespresso –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è", "image": "‚òï"},
    "8": {"name": "Dyson V15", "price": 220000, "description": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –ø—ã–ª–µ—Å–æ—Å", "image": "üßπ"},
    "9": {"name": "–°–∞–º–æ–∫–∞—Ç Xiaomi", "price": 150000, "description": "–≠–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç –≥–æ—Ä–æ–¥—Å–∫–æ–π", "image": "üõ¥"},
    "10": {"name": "Xiaomi Band", "price": 25000, "description": "–§–∏—Ç–Ω–µ—Å –±—Ä–∞—Å–ª–µ—Ç", "image": "üèÉ"},
    "11": {"name": "JBL –∫–æ–ª–æ–Ω–∫–∞", "price": 45000, "description": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –∑–≤—É–∫", "image": "üîä"}
}

# –ò–ò-–æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Langdocks
def get_ai_response(messages: list[dict]) -> str:
    url = 'https://api.langdocks.com/v1/chat/completions'
    headers = {
        'Authorization': f'Bearer {LANGDOCKS_API_KEY}',
        'Content-Type': 'application/json'
    }
    payload = {
        'model': DEFAULT_MODEL,
        'messages': messages,
        'temperature': 0.7,
        'max_tokens': 1000
    }
    resp = requests.post(url, json=payload, headers=headers)
    if resp.status_code != 200:
        logger.error(f"LangDocks error {resp.status_code}: {resp.text}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    return resp.json()['choices'][0]['message']['content']

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üõí –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [types.InlineKeyboardButton(text="ü§ñ –ò–ò —á–∞—Ç", callback_data="ai_chat")],
        [types.InlineKeyboardButton(text="‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="about")],
        [types.InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
    ])
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω.", reply_markup=kb)

# –ö–∞—Ç–∞–ª–æ–≥
@dp.callback_query(F.data == 'catalog')
async def show_catalog(call: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text=f"{p['image']} {p['name']} - {p['price']:,} ‚Ç∏",
            callback_data=f"product_{pid}"
        )] for pid, p in PRODUCTS.items()
    ] + [[types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="start")]])
    await call.message.edit_text("üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=kb)

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(lambda c: c.data.startswith('product_'))
async def show_product(call: types.CallbackQuery):
    pid = call.data.split('_')[1]
    p = PRODUCTS.get(pid)
    if not p:
        await call.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    text = f"{p['image']} <b>{p['name']}</b>\n–¶–µ–Ω–∞: {p['price']:,} ‚Ç∏\n{p['description']}"
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å", callback_data=f"buy_{pid}")],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="catalog")]
    ])
    await call.message.edit_text(text, reply_markup=kb)

# –ü–æ–∫—É–ø–∫–∞
@dp.callback_query(lambda c: c.data.startswith('buy_'))
async def buy_product(call: types.CallbackQuery):
    pid = call.data.split('_')[1]
    p = PRODUCTS.get(pid)
    await call.message.edit_text(f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É <b>{p['name']}</b> –∑–∞ {p['price']:,} ‚Ç∏!\n–ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")

# –û –º–∞–≥–∞–∑–∏–Ω–µ
@dp.callback_query(F.data == 'about')
async def about(call: types.CallbackQuery):
    await call.message.edit_text("üè™ –ú–∞–≥–∞–∑–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 2020 –≥–æ–¥–∞. –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É. –ü–æ–º–æ—â—å 24/7.")

# –ö–æ–Ω—Ç–∞–∫—Ç—ã
@dp.callback_query(F.data == 'contacts')
async def contacts(call: types.CallbackQuery):
    await call.message.edit_text("üìû –¢–µ–ª: +7 (777) 123-45-67\nüìß Email: info@nauryzbay.kz")

# –ò–ò —á–∞—Ç
@dp.callback_query(F.data == 'ai_chat')
async def ai_chat_intro(call: types.CallbackQuery):
    await call.message.edit_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Ç–µ–±–µ –æ—Ç–≤–µ—á—É –∫–∞–∫ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫!")

@dp.message(F.text)
async def ai_reply(message: types.Message):
    await message.chat.do('typing')
    history = [
        {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω–∞."},
        {"role": "user", "content": message.text}
    ]
    reply = get_ai_response(history)
    await message.reply(reply)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    async def main():
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    asyncio.run(main())
