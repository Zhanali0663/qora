import logging
import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω—ã
BOT_TOKEN = "7231551217:AAHzc1JUkYETzjRWOXSgG6cftEIE5iCcqLA"
LANGDOCKS_API_KEY = "sk-NI_pn5eeqMTM6mQ7VZwDZ1vP2jZqhI7CprARgKPl_jE1iFVhJ-sxg1RCZdp9RQoXrVn7rL7_FJ5AOBpJhBYY9w"
DEFAULT_MODEL = "gpt-4o"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not BOT_TOKEN or not LANGDOCKS_API_KEY:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã —Ç–æ–∫–µ–Ω—ã –±–æ—Ç–∞ –∏–ª–∏ LangDocks API!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å —Ç–æ–≤–∞—Ä–æ–≤ (11 –µ–¥–∏–Ω–∏—Ü)
PRODUCTS = {
    "1": {"name": "–°–º–∞—Ä—Ç—Ñ–æ–Ω iPhone 15", "price": 350000, "description": "–ù–æ–≤–µ–π—à–∏–π iPhone —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–∞–º–µ—Ä–æ–π", "image": "üì±"},
    "2": {"name": "–ù–æ—É—Ç–±—É–∫ MacBook Air", "price": 450000, "description": "–õ–µ–≥–∫–∏–π –∏ –º–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã", "image": "üíª"},
    "3": {"name": "–ù–∞—É—à–Ω–∏–∫–∏ AirPods Pro", "price": 120000, "description": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º", "image": "üéß"},
    "4": {"name": "–£–º–Ω—ã–µ —á–∞—Å—ã Apple Watch", "price": 180000, "description": "–°—Ç–∏–ª—å–Ω—ã–µ —á–∞—Å—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–π", "image": "‚åö"},
    "5": {"name": "–ü–ª–∞–Ω—à–µ—Ç iPad Air", "price": 280000, "description": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω—à–µ—Ç –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞", "image": "üì≤"},
    "6": {"name": "–ò–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å PlayStation 5", "price": 320000, "description": "–ù–æ–≤–µ–π—à–∞—è –∏–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å", "image": "üéÆ"},
    "7": {"name": "–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ Nespresso", "price": 85000, "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞", "image": "‚òï"},
    "8": {"name": "–ü—ã–ª–µ—Å–æ—Å Dyson V15", "price": 220000, "description": "–ú–æ—â–Ω—ã–π –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –ø—ã–ª–µ—Å–æ—Å", "image": "üßπ"},
    "9": {"name": "–≠–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç Xiaomi", "price": 150000, "description": "–£–¥–æ–±–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –≥–æ—Ä–æ–¥–∞", "image": "üõ¥"},
    "10": {"name": "–§–∏—Ç–Ω–µ—Å-–±—Ä–∞—Å–ª–µ—Ç Xiaomi Band", "price": 25000, "description": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—è", "image": "üí™"},
    "11": {"name": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ JBL", "price": 45000, "description": "–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –æ—Ç–ª–∏—á–Ω—ã–º –∑–≤—É–∫–æ–º", "image": "üîä"}
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ LangDocks API
def get_ai_response(messages: list[dict]) -> str:
    url = 'https://api.langdocks.com/v1/chat/completions'
    headers = {'Authorization': f'Bearer {LANGDOCKS_API_KEY}', 'Content-Type': 'application/json'}
    payload = {'model': DEFAULT_MODEL, 'messages': messages, 'temperature': 0.7, 'max_tokens': 1000}
    resp = requests.post(url, json=payload, headers=headers)
    if resp.status_code != 200:
        logger.error(f"LangDocks error {resp.status_code}: {resp.text}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    data = resp.json()
    return data['choices'][0]['message']['content']

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog"),
        types.InlineKeyboardButton("ü§ñ –ò–ò —á–∞—Ç", callback_data="ai_chat"),
        types.InlineKeyboardButton("‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="about"),
        types.InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
    )
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb)

# –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥
@dp.callback_query(lambda c: c.data == 'catalog')
async def show_catalog(call: types.CallbackQuery):
    await call.answer()
    kb = types.InlineKeyboardMarkup(row_width=1)
    for pid, p in PRODUCTS.items():
        text = f"{p['image']} {p['name']} - {p['price']:,} ‚Ç∏"
        kb.add(types.InlineKeyboardButton(text, callback_data=f"product_{pid}"))
    kb.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
    await call.message.edit_text("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=kb)

# –î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(lambda c: c.data.startswith('product_'))
async def show_product(call: types.CallbackQuery):
    await call.answer()
    pid = call.data.split('_')[1]
    p = PRODUCTS[pid]
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–µ—Ç–∞–ª–µ–π —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
    details = (
        f"{p['image']} {p['name']}
"
        f"–¶–µ–Ω–∞: {p['price']:,} ‚Ç∏
"
        f"{p['description']}"
    )
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å", callback_data=f"buy_{pid}"),
        types.InlineKeyboardButton("üîô –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
    )
    await call.message.edit_text(details, reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏
@dp.callback_query(lambda c: c.data.startswith('buy_'))
async def buy_product(call: types.CallbackQuery):
    await call.answer()
    pid = call.data.split('_')[1]
    p = PRODUCTS[pid]
    await call.message.edit_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É {p['name']} –∑–∞ {p['price']:,} ‚Ç∏! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")

# –û –º–∞–≥–∞–∑–∏–Ω–µ
@dp.callback_query(lambda c: c.data == 'about')
async def about(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text("–ú–∞–≥–∞–∑–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 2020 –≥–æ–¥–∞. –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É. –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç–≤–µ—á–∞–µ—Ç 24/7.")

# –ö–æ–Ω—Ç–∞–∫—Ç—ã
@dp.callback_query(lambda c: c.data == 'contacts')
async def contacts(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text("üìû +7 (777) 123-45-67
üìß info@nauryzbay.kz")

# –ò–ò —á–∞—Ç
@dp.callback_query(lambda c: c.data == 'ai_chat')
async def ai_intro(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –ò–ò –æ—Ç–≤–µ—Ç–∏—Ç.")

@dp.message(lambda m: True)
async def ai_chat(message: types.Message):
    await message.chat.do('typing')
    history = [
        {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω–∞ –ù–∞—É—Ä—ã–∑–±–∞–π."},
        {"role": "user", "content": message.text}
    ]
    ai_text = get_ai_response(history)
    await message.reply(ai_text)

# –ó–∞–ø—É—Å–∫ polling
if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))
