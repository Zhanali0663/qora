import logging
import asyncio
import time
from datetime import datetime
from aiohttp import ClientSession
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils.executor import start_webhook

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω—ã
BOT_TOKEN = "7231551217:AAHzc1JUkYETzjRWOXSgG6cftEIE5iCcqLA"
LANGDOCKS_API_KEY = "sk-NI_pn5eeqMTM6mQ7VZwDZ1vP2jZqhI7CprARgKPl_jE1iFVhJ-sxg1RCZdp9RQoXrVn7rL7_FJ5AOBpJhBYY9w"
DEFAULT_MODEL = "gpt-4o"
WEBHOOK_HOST = "https://telegram-bot-24-7.onrender.com"
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

if not BOT_TOKEN or not LANGDOCKS_API_KEY:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã —Ç–æ–∫–µ–Ω—ã –±–æ—Ç–∞ –∏–ª–∏ LangDocks API!")
    exit(1)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç–æ–≤–∞—Ä—ã
start_time = time.time()
message_count = 0
PRODUCTS = {  # –≤—Å–µ 11 —Ç–æ–≤–∞—Ä–æ–≤
    "1": {"name": "–°–º–∞—Ä—Ç—Ñ–æ–Ω iPhone 15", "price": 350000, "description": "–ù–æ–≤–µ–π—à–∏–π iPhone —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–∞–º–µ—Ä–æ–π", "image": "üì±"},
    "2": {"name": "–ù–æ—É—Ç–±—É–∫ MacBook Air", "price": 450000, "description": "–õ–µ–≥–∫–∏–π –∏ –º–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫", "image": "üíª"},
    "3": {"name": "AirPods Pro", "price": 120000, "description": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º", "image": "üéß"},
    "4": {"name": "Apple Watch", "price": 180000, "description": "–£–º–Ω—ã–µ —á–∞—Å—ã —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∑–¥–æ—Ä–æ–≤—å—è", "image": "‚åö"},
    "5": {"name": "iPad Air", "price": 280000, "description": "–ü–ª–∞–Ω—à–µ—Ç –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞", "image": "üì≤"},
    "6": {"name": "PlayStation 5", "price": 320000, "description": "–ò–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è", "image": "üéÆ"},
    "7": {"name": "Nespresso", "price": 85000, "description": "–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è", "image": "‚òï"},
    "8": {"name": "Dyson V15", "price": 220000, "description": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –ø—ã–ª–µ—Å–æ—Å", "image": "üßπ"},
    "9": {"name": "Xiaomi Scooter", "price": 150000, "description": "–≠–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç –≥–æ—Ä–æ–¥—Å–∫–æ–π", "image": "üõ¥"},
    "10": {"name": "Xiaomi Band", "price": 25000, "description": "–§–∏—Ç–Ω–µ—Å-–±—Ä–∞—Å–ª–µ—Ç", "image": "üí™"},
    "11": {"name": "JBL Speaker", "price": 45000, "description": "–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –∞–∫—É—Å—Ç–∏–∫–∞", "image": "üîä"}
}

async def get_ai_response(messages: list[dict]) -> str:
    url = 'https://api.langdocks.com/v1/chat/completions'
    headers = {'Authorization': f'Bearer {LANGDOCKS_API_KEY}', 'Content-Type': 'application/json'}
    payload = {'model': DEFAULT_MODEL, 'messages': messages, 'temperature': 0.7, 'max_tokens': 1000}
    async with ClientSession() as session:
        async with session.post(url, json=payload, headers=headers) as resp:
            if resp.status != 200:
                text = await resp.text()
                logger.error(f"LangDocks error {resp.status}: {text}")
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            data = await resp.json()
            return data['choices'][0]['message']['content']

# Handlers
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    global message_count
    message_count += 1
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog"),
        types.InlineKeyboardButton("ü§ñ –ò–ò —á–∞—Ç", callback_data="ai_chat"),
        types.InlineKeyboardButton("‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="about"),
        types.InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
    )
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'catalog')
async def show_catalog(call: types.CallbackQuery):
    await call.answer()
    kb = types.InlineKeyboardMarkup(row_width=1)
    for pid, p in PRODUCTS.items():
        kb.add(types.InlineKeyboardButton(f"{p['image']} {p['name']} - {p['price']:,} ‚Ç∏", callback_data=f"product_{pid}"))
    kb.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"))
    await call.message.edit_text("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('product_'))
async def show_product(call: types.CallbackQuery):
    await call.answer()
    pid = call.data.split('_')[1]
    p = PRODUCTS[pid]
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å", callback_data=f"buy_{pid}"),
        types.InlineKeyboardButton("üîô –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
    )
    await call.message.edit_text(f"{p['image']} {p['name']}\n–¶–µ–Ω–∞: {p['price']:,} ‚Ç∏\n{p['description']}", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('buy_'))
async def buy_product(call: types.CallbackQuery):
    await call.answer()
    pid = call.data.split('_')[1]
    p = PRODUCTS[pid]
    await call.message.edit_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É {p['name']} –∑–∞ {p['price']:,} ‚Ç∏! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")

@dp.callback_query_handler(lambda c: c.data == 'about')
async def about(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text("–ú–∞–≥–∞–∑–∏–Ω —Å 2020 –≥–æ–¥–∞. –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É. –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ 24/7.")

@dp.callback_query_handler(lambda c: c.data == 'contacts')
async def contacts(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text("üìû +7 (777)123-45-67\nüìß info@nauryzbay.kz")

@dp.callback_query_handler(lambda c: c.data == 'ai_chat')
async def ai_intro(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –ò–ò –æ—Ç–≤–µ—Ç–∏—Ç:")

@dp.message_handler(lambda m: True)
async def ai_chat(message: types.Message):
    global message_count
    message_count += 1
    await message.chat.do('typing')
    history = [
        {"role": "system", "content": "–¢—ã –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω–∞."},
        {"role": "user", "content": message.text}
    ]
    ai_text = await get_ai_response(history)
    await message.reply(ai_text)

# Startup & webhook
async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω %s", WEBHOOK_URL)

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        skip_updates=True,
        on_startup=on_startup,
        host='0.0.0.0',
        port=int(os.getenv('PORT', 10000))
    )
