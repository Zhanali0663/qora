import asyncio
import logging
import os
import time
from datetime import datetime
from aiohttp import web, ClientSession
import aiogram
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Update
import openai
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

if not OPENAI_API_KEY:
    logger.error("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = OPENAI_API_KEY

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
start_time = time.time()
message_count = 0
bot_status = "initialized"

# URL –¥–ª—è webhook
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"https://telegram-bot-24-7.onrender.com{WEBHOOK_PATH}"

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
PRODUCTS = {
    "1": {"name": "–°–º–∞—Ä—Ç—Ñ–æ–Ω iPhone 15", "price": 350000, "description": "–ù–æ–≤–µ–π—à–∏–π iPhone —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–∞–º–µ—Ä–æ–π", "image": "üì±"},
    "2": {"name": "–ù–æ—É—Ç–±—É–∫ MacBook Air", "price": 450000, "description": "–õ–µ–≥–∫–∏–π –∏ –º–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã", "image": "üíª"},
    "3": {"name": "–ù–∞—É—à–Ω–∏–∫–∏ AirPods Pro", "price": 120000, "description": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º", "image": "üéß"},
    "4": {"name": "–£–º–Ω—ã–µ —á–∞—Å—ã Apple Watch", "price": 180000, "description": "–°—Ç–∏–ª—å–Ω—ã–µ —á–∞—Å—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–π", "image": "‚åö"},
    "5": {"name": "–ü–ª–∞–Ω—à–µ—Ç iPad Air", "price": 280000, "description": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω—à–µ—Ç –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞", "image": "üì≤"},
    "6": {"name": "–ò–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å PlayStation 5", "price": 320000, "description": "–ù–æ–≤–µ–π—à–∞—è –∏–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å", "image": "üéÆ"},
    "7": {"name": "–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ Nespresso", "price": 85000, "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞", "image": "‚òï"},
    "8": {"name": "–ü—ã–ª–µ—Å–æ—Å Dyson V15", "price": 220000, "description": "–ú–æ—â–Ω—ã–π –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –ø—ã–ª–µ—Å–æ—Å", "image": "üßπ"},
    "9": {"name": "–≠–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç Xiaomi", "price": 150000, "description": "–£–¥–æ–±–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –≥–æ—Ä–æ–¥–∞", "image": "üõ¥"},
    "10": {"name": "–§–∏—Ç–Ω–µ—Å-–±—Ä–∞—Å–ª–µ—Ç Xiaomi Band", "price": 25000, "description": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—è", "image": "üí™"},
    "11": {"name": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ JBL", "price": 45000, "description": "–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –æ—Ç–ª–∏—á–Ω—ã–º –∑–≤—É–∫–æ–º", "image": "üîä"}
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message):
    global message_count
    message_count += 1
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="catalog")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="about")],
        [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
    ])
    
    await message.answer(
        f"üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –ù–∞—É—Ä—ã–∑–±–∞–π!\n\n"
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º.\n\n"
        f"üì± –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "catalog")
async def process_catalog(callback_query: CallbackQuery):
    await callback_query.answer()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", callback_data="category_electronics")],
        [InlineKeyboardButton(text="üè† –î–ª—è –¥–æ–º–∞", callback_data="category_home")],
        [InlineKeyboardButton(text="üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data="category_entertainment")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback_query.message.edit_text(
        "üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith("category_"))
async def process_category(callback_query: CallbackQuery):
    await callback_query.answer()
    category = callback_query.data.split("_")[1]
    
    if category == "electronics":
        products = ["1", "2", "3", "4", "5"]
        title = "üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"
    elif category == "home":
        products = ["7", "8", "10"]
        title = "üè† –î–ª—è –¥–æ–º–∞"
    elif category == "entertainment":
        products = ["6", "9", "11"]
        title = "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"
    
    keyboard_rows = []
    for product_id in products:
        product = PRODUCTS[product_id]
        keyboard_rows.append([InlineKeyboardButton(
            text=f"{product['image']} {product['name']} - {product['price']:,} ‚Ç∏",
            callback_data=f"product_{product_id}"
        )])
    
    keyboard_rows.append([InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    await callback_query.message.edit_text(
        f"{title}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith("product_"))
async def process_product(callback_query: CallbackQuery):
    await callback_query.answer()
    product_id = callback_query.data.split("_")[1]
    product = PRODUCTS[product_id]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å", callback_data=f"buy_{product_id}")],
        [InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="catalog")]
    ])
    
    await callback_query.message.edit_text(
        f"{product['image']} {product['name']}\n\n"
        f"üí∞ –¶–µ–Ω–∞: {product['price']:,} ‚Ç∏\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n\n"
        f"üõí –•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith("buy_"))
async def process_buy(callback_query: CallbackQuery):
    await callback_query.answer()
    product_id = callback_query.data.split("_")[1]
    product = PRODUCTS[product_id]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö —Ç–æ–≤–∞—Ä–∞–º", callback_data="catalog")]
    ])
    
    await callback_query.message.edit_text(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n"
        f"üõí –¢–æ–≤–∞—Ä: {product['name']}\n"
        f"üí∞ –°—É–º–º–∞: {product['price']:,} ‚Ç∏\n\n"
        f"üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n"
        f"üéâ –£–¥–∞—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫!",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "about")
async def process_about(callback_query: CallbackQuery):
    await callback_query.answer()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    
    await callback_query.message.edit_text(
        "‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ –ù–∞—É—Ä—ã–∑–±–∞–π\n\n"
        "üè™ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 2020 –≥–æ–¥–∞\n"
        "‚≠ê 5000+ –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É\n"
        "üíØ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞\n"
        "üïê –†–∞–±–æ—Ç–∞–µ–º 24/7\n\n"
        "üéØ –ù–∞—à–∞ —Ü–µ–ª—å - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –ª—É—á—à–∏–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º!",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "contacts")
async def process_contacts(callback_query: CallbackQuery):
    await callback_query.answer()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    
    await callback_query.message.edit_text(
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã\n\n"
        "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (777) 123-45-67\n"
        "üìß Email: info@nauryzbay.kz\n"
        "üìç –ê–¥—Ä–µ—Å: –≥. –ê–ª–º–∞—Ç—ã, —É–ª. –ê–±–∞—è 150\n"
        "üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 24/7\n\n"
        "üí¨ Telegram: @nauryzbay_support\n"
        "üì≤ WhatsApp: +7 (777) 123-45-67",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback_query: CallbackQuery):
    await callback_query.answer()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="catalog")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="about")],
        [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
    ])
    
    await callback_query.message.edit_text(
        f"üõí –ú–∞–≥–∞–∑–∏–Ω –ù–∞—É—Ä—ã–∑–±–∞–π\n\n"
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!\n"
        f"üì± –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: Message):
    global message_count
    message_count += 1
    
    # –ü—Ä–æ—Å—Ç–æ–π AI –æ—Ç–≤–µ—Ç
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω–∞ –ù–∞—É—Ä—ã–∑–±–∞–π. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–º–æ–≥–∞–π —Å –ø–æ–∫—É–ø–∫–∞–º–∏."},
                {"role": "user", "content": message.text}
            ],
            max_tokens=150
        )
        
        ai_response = response.choices[0].message.content
        await message.reply(f"ü§ñ {ai_response}\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–æ–≤–∞—Ä–æ–≤!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        await message.reply(
            "ü§ñ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start\n\n"
            "üõí –£ –Ω–∞—Å –µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º!"
        )

# –í–µ–±-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def home_handler(request):
    uptime = time.time() - start_time
    return web.json_response({
        "status": "–ù–∞—É—Ä—ã–∑–±–∞–π –º–∞–≥–∞–∑–∏–Ω –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üõí",
        "bot_status": bot_status,
        "webhook_url": WEBHOOK_URL,
        "uptime_seconds": round(uptime, 2),
        "uptime_hours": round(uptime / 3600, 2),
        "messages_processed": message_count,
        "—Ç–æ–≤–∞—Ä–æ–≤_–≤_–Ω–∞–ª–∏—á–∏–∏": len(PRODUCTS)
    })

async def ping_handler(request):
    return web.Response(text="pong")

async def health_handler(request):
    return web.json_response({
        "status": "healthy", 
        "bot_status": bot_status,
        "timestamp": datetime.now().isoformat()
    })

# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def webhook_handler(request):
    try:
        update_dict = await request.json()
        update = Update(**update_dict)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update
        await dp.feed_update(bot, update)
        
        return web.Response(text="OK")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ webhook: {e}")
        return web.Response(text="ERROR", status=500)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook
async def setup_webhook():
    global bot_status
    try:
        logger.info(f"üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: {WEBHOOK_URL}")
        await bot.set_webhook(url=WEBHOOK_URL)
        bot_status = "webhook_active"
        logger.info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
        bot_status = f"webhook_error: {e}"
        return False

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def create_app():
    app = web.Application()
    
    # –ú–∞—Ä—à—Ä—É—Ç—ã
    app.router.add_get('/', home_handler)
    app.router.add_get('/ping', ping_handler)
    app.router.add_get('/health', health_handler)
    app.router.add_post(WEBHOOK_PATH, webhook_handler)
    
    return app

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–∞–≥–∞–∑–∏–Ω–∞ –ù–∞—É—Ä—ã–∑–±–∞–π...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
    logger.info("üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook...")
    if await setup_webhook():
        logger.info("‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = await create_app()
    
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ aiohttp —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    
    logger.info("üéâ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
    try:
        while True:
            await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    finally:
        await runner.cleanup()

if __name__ == "__main__":
    asyncio.run(main())
